---
title: "Mistake(n) statistics"
author: "Lasse Hjorth Madsen"
date: today 
format: 
  html:
    fig-width: 7
    fig-height: 4
toc: true
toc-expand: true
editor: source
execute:
  echo: false
  warning: false
  cache: false
---

```{r setup}
library(tidyverse)
theme_set(theme_minimal())
devtools::load_all(path = "../../backgammon")
```

```{r get_data}
# Create a df like bgmoves, but with all available
# levels of analysis, i.e. 0-ply, 1-ply ... 4-ply

if (file.exists("data/plies.rds")) {
  plies <- readRDS("data/plies.rds")

  } else {

  paths <- list.files(
    "..\\..\\backgammon\\data-raw\\galaxy-matches\\analyzed\\",
    full.names = TRUE) %>%
    set_names(str_extract(., "\\d.+$"))
  
  plies <- paths %>% 
    map(list.files, pattern = "*.txt", full.names = TRUE) %>% 
    map(txt2df) %>% 
    list_rbind(names_to = "ply")
  
  plies %>% saveRDS("data/plies.rds")
}
```

## Why this?

This is an exploratory analysis of a big chunk of my backgammon matches played on Backgammon Galaxy.

## Shopping list

- Sum of errors by opponent, checker/cube (did I outplay opps or vice versa?)
- My sum and count of errors by checker/cube (Are checker plays more costly just because they are more frequent?)
- My sum and count of errors by proper cube action (What kind of cube decision errors are most costly for me?)
- Sum of checker/cube mistakes by size: Does the occasional quadruple blunder matter a lot? Is there a lot to gain by better focus, by getting rid of oversights and mis-clicks?
- My sum and count of errors by move no. (How much is given up in the opening?)
- Sum of error by doubling when too good, vs. gain when opp takes too good doubles. Does it pay to double when too good?
- Sum of error by doubling when not good enough, vs. gain when opp passes no doubles. Does it pay to double a little too early?
- Examples of the rare bird: Too good and not good enough.
- Are higher plies worth the extra compute time?


## Are higher plies worth it?

### Compare some overall results

```{r aggregate_errors}
costs <- plies %>%
  select(ply, turn, cube_err, move_err) %>% 
  pivot_longer(cols = c(cube_err, move_err), names_to = "type", values_to = "cost") %>% 
  mutate(turn = case_match(turn, 
                              "lasse" ~ "My errors", 
                              .default = "Opponent's errors")) %>% 
  group_by(ply, turn) %>% 
  summarise(error_sum = sum(cost, na.rm = TRUE), .groups = "drop") %>% 
  group_by(ply) %>% 
  mutate(error_pct = error_sum / sum(error_sum) * 100) %>% 
  ungroup()
```

```{r plot_costs}
costs %>% 
  ggplot(aes(x = ply, y = error_sum, fill = turn)) +
  geom_col(position = "dodge") +
  labs(title = "Sum of errors by player and ply", 
       subtitle = "'My errors' is the sum of all my errors in all matches",
       y = "Sum of errors", x = NULL, fill = NULL)
```

```{r plot_costs_pct}
costs %>% 
  ggplot(aes(x = ply, y = error_pct, fill = turn)) +
  geom_col() +
  labs(title = "Sum of errors by player and ply", 
       subtitle = "'My errors' is the sum of all my errors in all matches, in percent of total sum of errors",
       y = "Sum of errors, percent", x = NULL, fill = NULL)
```

```{r aggregate_errors_type}
costs2 <- plies %>%
  select(ply, turn, cube_err, move_err) %>% 
  pivot_longer(cols = c(cube_err, move_err), names_to = "type", values_to = "cost") %>% 
  mutate(turn = case_match(turn, 
                              "lasse" ~ "My errors", 
                              .default = "Opponent's errors"),
         type = case_match(type, 
                              "cube_err" ~ "Cube decision", 
                              "move_err" ~ "Checker play")) %>% 
  group_by(ply, turn, type) %>% 
  summarise(error_sum = sum(cost, na.rm = TRUE), .groups = "drop") %>% 
  group_by(ply, type) %>% 
  mutate(error_pct = error_sum / sum(error_sum) * 100) %>% 
  ungroup()
```

```{r plot_costs_type}
costs2 %>% 
  ggplot(aes(x = ply, y = error_sum, fill = type)) +
  geom_col() +
  facet_wrap(facets = vars(turn)) +
  labs(title = "Sum of errors by player, ply and cube/checker play", 
       subtitle = "'My errors' is the sum of all my errors in all matches",
       y = "Sum of errors", x = NULL, fill = NULL)
```

### Examples

```{r compare_positions}
# Create df to compare 3-ply and 4-ply analysis

# Subset, pivot longer, and clean
df <- plies %>% 
  select(ply, cube_err, move_err, cube_eq, move_eq, xgid) %>% 
  filter(ply %in% c("3-ply", "4-ply")) %>% 
  pivot_longer(cols = c(cube_err, move_err), 
               names_to = "type", 
               values_to = "cost") %>% 
  mutate(type = case_match(type,
                           "cube_err" ~ "Cube decision", 
                           "move_err" ~ "Checker play")) %>% 
  distinct(xgid, ply, type, .keep_all = TRUE) %>% 
  split(.$ply)

# Join 3-ply and 4-ply dfs to one
df <- df[[1]] %>% 
  left_join(df[[2]], by = c("xgid", "type"), suffix = c("_3-ply", "_4-ply"))

# Compute diffs, pick largest
df <- df %>% 
  select(-starts_with("ply_")) %>% 
  mutate(diff = `cost_3-ply` - `cost_4-ply`) %>% 
  filter(diff != 0) %>% 
  group_by(type, diff > 0) %>% 
  slice_max(order_by = abs(diff), n = 5) %>% 
  ungroup()
```

```{r plot_examples}
#| layout-ncol: 1
# results: asis

for (i in 1:nrow(df)) { 
  temp <- df %>% slice(i)
  
  # cat("\n\n", "#### Position ", i, ": ", temp$type, "\n\n", sep = "")
  
  ggboard(temp$xgid) %>% print()
  cat("Discrepancy in size of error: ", temp$diff, "\n\n", sep = "")

  if (temp$type == "Cube decision") { # Cube decision
    cat(temp$`cube_eq_3-ply`, "\n\n", temp$`cube_eq_4-ply`, sep = "")
    cat("\n\n")
  } else {                            # Checker play
    cat(temp$`move_eq_3-ply`, "\n\n", temp$`move_eq_4-ply`, sep = "")
    cat("\n\n")
  }
}
```

