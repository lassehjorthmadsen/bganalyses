---
title: "Match Equity Precision "
author: "Lasse Hjorth Madsen"
date: today 
format: html
toc: true
toc-expand: true
editor: source
execute:
  echo: false
  warning: false
---

```{r setup}
library(tidyverse)
devtools::load_all(path = "../../backgammon")

theme_set(
  theme_minimal() +
    theme(
      legend.position = c(1, 1),
      legend.justification = c(1, 1),
      legend.background = element_rect(fill = "white", color = NA)
    )
)

# Met table
met <- get_met()

# Gammon and backgammon frequencies for gammonish take points
probs <- c(0.364, 0.13, 0.006, 0.364, 0.13, 0.006)

tp <- met %>% 
  as_tibble() %>% 
  pivot_longer(cols = everything(), names_to = "y", values_to = "mwc") %>% 
  mutate(x = sort(rep(1:25, 25)),
         y = as.integer(y),
         cube = 1) %>%
  select(x, y, mwc, cube) %>%
  expand_grid(., precision = 2:6) %>% 
  rowwise() %>% 
  mutate(
    `Take point` = tp(x, y, cube, round(met, precision)),
    `Gammonish take point` = tp_gammons(
      x,
      y,
      probs,
      cube,
      round(met, precision)
    )
  ) %>% 
  ungroup()
```

## Why this?

Match equity calculations in backgammon can be tricky and hard to perform over the table. How accurate can we hope to be when calculating take points that involve more than one entry in a match equity table?

Let's do a couple of simple experiments and try to find out.

## The rounding problem

Here's one example that is fairly straight forward. You're in the beginning of a 17-point match, off for a bad start, trailing 0-5 or 17-away, 12-away, or (-17,-12). You're facing a double in a bearoff that you consider a borderline take/pass for money.

Perhaps something like this:

```{r}
#| fig-width: 4
#| fig-height: 4
ggboard("XGID=-DB-------------------bbb-:0:0:-1:00:0:5:0:17:10")
```

Should trailing as white make you more or less inclined to accept a double from black?

For simplicity let's do the calculations assuming no redoubles, since this example is a bearoff with no recube potential anyway. Using the Kazaross XG2 match equity table, with full six digit precision, the calculation goes like this.

```{r}
pass <- mwc(17, 11, met)
twin <- mwc(15, 12, met)
tlose <- mwc(17, 10, met)
loss <- pass - tlose
gain <- twin - pass
```

-   A pass means (-17,-11), $mwc=`r pass`$

-   Taking and winning means (-15, -12), $mwc=`r twin`$, for a gain of: $`r twin`-`r pass` = `r gain`$

-   Taking and losing means (-17,-10), $mwc=`r tlose`$, for a loss of: $`r pass` - `r tlose` = `r loss`$

-   $Take\ point = \frac{loss}{loss+gain} = \frac{`r loss`}{`r loss` + `r gain`} = `r loss/(loss + gain)`$

Your take point is a bit *higher* than for money, you should be *less* inclined to take; so you probably have a *pass* if this is borderline for money.

But of course, nobody can do calculations like this with six digits over the board. If you're a really good tournament player, you might attempt doing the same calculations rounded to two digits (whole percentages).

Let's see how that would play out:

```{r}
pass <- round(pass, 2)
twin <- round(twin, 2)
tlose <- round(tlose, 2)
loss <- pass - tlose
gain <- twin - pass
```

-   A pass means (-17,-11), $mwc=`r pass`$

-   Taking and winning means (-15, -12), $mwc=`r twin`$, for a gain of: $`r twin`-`r pass` = `r gain`$

-   Taking and losing means (-17,-10), $mwc=`r tlose`$, for a loss of: $`r pass` - `r tlose` = `r loss`$

-   $Take\ point = \frac{loss}{loss+gain} = \frac{`r loss`}{`r loss` + `r gain`} = `r loss/(loss + gain)`$

Now, you reach the opposite conclusion: Your take point is considerably *lower* than the well-known $0.25$ cubeless take point for money. You might well have a clear *take*.

Looking at the calculations, we see that they are impacted heavily by a couple of rounding errors: The equity from passing and getting to (-17, -11) gets rounded *down*; the equity from taking and winning gets rounded *up* so the total $mwc$ loss from taking (and being wrong) is only about $0.03$, almost a full percentage point lower that the $0.038$ we get using all digits.

Finally, that lower number goes into both the numerator and the denominator, of the take point calculation, impacting the take point in a big way.

## How common is this?

Did I cherry pick this example? Well, yes, but the cherry wasn't hard to find. Let's look at more examples.

### Simple take points

For starters, here's a plot showing more cubeless, gammonless take points, when the player being doubled is 17-away.

```{r}
tp %>% 
  filter(x %in% c(17), y > 1, precision == 6) %>% 
  ggplot(aes(x = y, y = `Take point`, color = fct_rev(factor(x)), group = x)) +
  scale_x_continuous(breaks = 2:25, minor_breaks = 2:25) +
  scale_y_continuous(breaks = seq(0.15, 0.36, 0.01), minor_breaks = NULL) +
  geom_point() +
  geom_line() +
  labs(title = "Take points at 17-away", 
       subtitle = "No cube, no gammons",
       x = "Opponent needs", color = "Player needs") 
```

Some observations:

-   Not surprisingly, you have a low take point, around $0.19$, when the opponent needs just two points to win, and you have an automatic redouble available.
-   Same thing when the opponent needs three points and you're kind of desperate.
-   You have a much *higher* take point when the opponent needs four, because the extra two point at stake are very valuable for the opponent.
-   The same holds, but to a smaller and smaller degree, when the opponent needs 6, 8 or 10 points to win.

Let's extend the plot to cover more scores:

```{r}
tp %>% 
  filter(x %in% c(2, 3, 4, 17, 25), y > 1, precision == 6) %>% 
  ggplot(aes(x = y, y = `Take point`, color = fct_rev(factor(x)), group = x)) +
  scale_x_continuous(breaks = 2:25, minor_breaks = 2:25) +
  scale_y_continuous(breaks = seq(0.15, 0.36, 0.01), minor_breaks = NULL) +
  geom_point() +
  geom_line() +
  labs(title = "Take points at 2-, 3-, 4-, 17-, and 25-away", 
       subtitle = "No cube, no gammons",
       x = "Opponent needs", color = "Player needs") 
```

Some observations:

-   In general, for this kind of doubles (initial, cubeless, gammonless) it is *easier*, not harder, to accept a double if you are leading.

-   The exception is if the opponent needs only two or three points while having a big lead. Here, you're near dead if you lose anyway, so take points are low.

-   The very highest take point we find at (-4,-3): $`r round(tp(4, 3, 1, met), 3)`$ At this score you're often better off passing and getting to the notorious (-4,-2) where you can double very aggresively and try to win the match with a gammon.

### With rounding errors

But the goal was to examine the impact of rounding errors. Let's go back to the 17-away take points from the first diagram, and experiment with the number of digits we use for calculating take points.

```{r}
tp %>% 
  filter(x %in% c(17), y > 3) %>% 
  ggplot(aes(x = y, y = `Take point`, color = factor(precision), group = precision)) +
  scale_x_continuous(breaks = 2:25, minor_breaks = 2:25) +
  scale_y_continuous(breaks = seq(0.15, 0.36, 0.01), minor_breaks = NULL) +
  geom_point() +
  geom_line() +
  labs(title = "Take points at 17-away, with rounding errors",
       subtitle = "by opponent's score and number of digits used for match equities",
       x = "Opponent needs", color = "No. of digits") 
```

We see that the 2-digit calculations are often off by a fair amount. The (-17,-12) example I mentioned earlier, is not the only one.

Let's extend this again with many small plots for different scores:

```{r}
#| fig-height: 7
 
tp %>% 
  filter(x %in% c(2, 3, 4, 5, 7, 10, 12, 14, 17, 20, 25), 
         y > 3, `Take point` > 0, `Take point` < 0.5) %>%
  mutate(score_label = fct_reorder(paste("Player needs:", x), x)) %>% 
  ggplot(aes(x = y, y = `Take point`, color = factor(precision), group = precision)) +
  facet_wrap(facets = vars(score_label)) +
  geom_point() +
  geom_line() +
  labs(title = "Take points at many scores, with rounding errors",
       subtitle = "by opponent's score and number of digits used for match equities",
       x = "Opponent needs", 
       color = "No. of digits") +
  theme(legend.position = c(1, 0), legend.justification = c(1, 0)) +
  guides(colour = guide_legend(ncol = 2))
```

From the chart it is pretty evident that two-digit precision just doesn't cut it for calculating these kind of take points: They are all over the place, basically.

```{r}
diffs <- tp %>% 
  filter(x > 1, y > 1, precision %in% c(2, 6)) %>% 
  select(x, y, precision, `Take point`, `Gammonish take point`) %>%
  rename(`Gammonless take point` = `Take point`) %>% 
  pivot_longer(cols = c(`Gammonless take point`, `Gammonish take point`), 
               names_to = "type", values_to = "Take point") %>% 
  pivot_wider(names_from = precision, values_from = `Take point`) %>% 
  mutate(diff = `2` - `6`)
```

Across all scores, the average absolute difference between take points with two-digit precision and six-digit precision is: `r diffs$diff %>% abs() %>% mean(na.rm = T) %>% round(3)`

The distribution of differences looks like this:

```{r}
diffs %>% 
  filter(!is.na(diff), type == "Gammonless take point") %>% 
  ggplot(aes(x = diff)) +
  geom_density() +
  scale_x_continuous(breaks = seq(-0.5, 0.7, 0.1), 
                     minor_breaks = seq(-0.5, 0.7, 0.025)) +
  labs(title = "Distribution of gammonless taking point rounding errors",
       subtitle = "All pre-crawford scores in 25-point matches",
       x = "Difference: Two-digit take point - six-digit take point",
       y = "Density")
```

We see that is is very common for the two-digit take point to be off by a couple of percentage points; sometimes as much as five percentage points.

(In some extreme cases the difference between two-digit and six-digit take points can be as high as $0.78$; this is because of scores like (-2,-23) where the leader's rounded $mwc$ is $1.00$ even after passing; there's no measurable gain from taking and winning, so the take point becomes $1.00$).

### With gammons

Before we wrap up, let's have a look at how take points with and without rounding error look when we also have gammons and backgammons. We use gammon and backgammon *frequencies*, that is, the proportion of games won or lost, that result in a gammon or backgammon. For illustration, we use frequencies similar to what can be expected at the beginning of a money game:

-   Player's gammon frequency: $`r probs[2] / sum(probs[1:3])`$
-   Player's backgammon frequency: $`r probs[3] / sum(probs[1:3])`$
-   Opponent's gammon frequency: $`r probs[5] / sum(probs[4:6])`$
-   Opponent's gammon frequency: $`r probs[6] / sum(probs[4:6])`$

A plot similar to the one earlier, this time comparing take points with and without gammons, 2- and 6-digit precision, when 17-away, vs. opponent score:

```{r}
tp %>% 
  filter(x %in% c(17), y > 3, precision %in% c(2, 6)) %>% 
  rename(`Gammonless take point` = `Take point`) %>% 
  pivot_longer(cols = c(`Gammonless take point`, `Gammonish take point`), 
               names_to = "type", values_to = "Take point") %>% 
  ggplot(aes(x = y, y = `Take point`, color = factor(precision), group = precision)) +
  facet_wrap(facets = vars(type)) +
  geom_point() +
  geom_line() +
  labs(title = "Take points at 17-away", 
       subtitle = "No cube, position type gammonless vs gammonish",
       x = "Opponent needs", 
       color = "No. of digits") 
```

For gammonish positions the take points tend to increase with size of lead, but using only two digits basically create so much noise to that the calculations are meaningless.

Funny enough, it seems that the noise is actually sightly *smaller* when working with positions where gammons and backgammons are possible. This is probably because the most destructive rounding errors then to be cancel out when we have more numbers involved.

The density plot of take point rounding errors confirm this:

```{r}
diffs %>% 
  filter(!is.na(diff)) %>% 
  ggplot(aes(x = diff, fill = type)) +
  geom_density(alpha = 0.4) +
  scale_x_continuous(breaks = seq(-0.5, 0.7, 0.1), 
                     minor_breaks = seq(-0.5, 0.7, 0.025)) +
  labs(title = "Distribution of taking point rounding errors",
       subtitle = "All pre-crawford scores in 25-point matches",
       x = "Difference: Two-digit take point - six-digit take point",
       y = "Density",
       fill = "Take point type")
```

## Conclusions

-   It seems that doing take point calculations that involve several entries in the match equity table really requires at least three digit precision.
-   Since this is not feasible to do over the board, the best practial approach is probably to study benchmark positions and to use heuristics along those lines:
    -   When one player need 2, 3, or 4 points to win, be aware that those remaining points are particular valuable.
    -   Automatic redoubles creating *overage* for one player and has a big impact on take decisions.\
    -   When leading, be slightly *more* willing to take doubles in races where no gammons are possible.
    -   When leading, be slightly *less* willing to take doubles in games where gammons are a real possibility.
