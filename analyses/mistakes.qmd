---
title: "Mistakes were made"
author: "Lasse Hjorth Madsen"
date: today 
format: html
toc: true
toc-expand: true
toc-depth: 4
editor: source
execute:
  echo: false
  warning: false
  cache: true
---

```{r setup}
#| cache: false
library(tidyverse)
devtools::load_all(path = "../../bglab")
```

```{r subset_and_clean}
cost_breaks <- c(0.05, 0.10, 0.20, 0.3, Inf) %>% sort()
cost_labels <- paste0(">", cost_breaks)[-length(cost_breaks)] %>% rev()

move_breaks <- c(0, 5, 15, Inf) 
move_labels <- paste0(">", move_breaks)[-length(move_breaks)] 

df <- bgmoves %>% 
  select(file, move_no, play, turn, proper_ca, move_err, cube_err, cube_eq, move_eq, xgid) %>% 
  pivot_longer(cols = c(cube_err, move_err), names_to = "type", values_to = "cost") %>% 
  filter(!is.na(cost), cost <= -min(cost_breaks), turn == "lasse") %>% 
  mutate(turn = case_match(turn,  "lasse" ~ "Me", .default = "Opponent"),
         type = case_match(type, "cube_err" ~ "Cube decision", "move_err" ~ "Checker play"),
         cost_bin = fct_rev(cut(.$cost, -cost_breaks, right = FALSE, labels = cost_labels)), 
         move_bin = cut(.$move_no, move_breaks, right = TRUE, labels = move_labels),
         mistake_type = case_when(
           type == "Cube decision" & play == "Rejects" & str_detect(proper_ca, "take") ~ "Wrong pass",
           type == "Cube decision" & play == "Accepts" & str_detect(proper_ca, "pass") ~ "Wrong take",
           type == "Cube decision" & play == "Doubles" & str_detect(proper_ca, "No") ~ "Wrong double",
           type == "Cube decision" & play == "Rolls" & str_detect(proper_ca, "Double|Redouble") ~ "Missed double",
           type == "Cube decision" & play == "Doubles" & str_detect(proper_ca, "Too") ~ "Wrong cash")) 
```

```{r params}
max_examples <- 20

mistake_types <- unique(df$mistake_type)
mistake_types <- mistake_types[!is.na(mistake_types)]

cost_bins <- unique(df$cost_bin)
cost_bins <- cost_bins[!is.na(cost_bins)]

move_bins <- unique(df$move_bin)

# set.seed(1970)
```

## Why this?

This is a catalog of positions where I made some kind of mistake. They are collected from my online matches at [Backgammon Galaxy](play.backgammongalaxy.com).

It is an automated report created like this: First, I use a Python script for GNU Backgammon to analyze my collection of matches at 4-ply. Then, my R-package `Backgammon` contains a function turn the GNU BG analysis files into a data frame that can be analyzed using normal statistical tools. Finally, this Quarto notebook with R-code analyzes that data. 

I split the mistakes into a structure like this:

  * Cube decisions
    + Wrong takes
    + Wrong passes
    + Wrong doubles 
    + Missed doubles
    + Wrong cash (when too good)
    
  * Checker plays
    + Moves 1-5 (early game)
    + Moves 6-15 (middle game)
    + Moves 16+ (end game)

With all categories split into the same error sizes like this:

  - Error > 0.05 (significant error) 
  - Error > 0.1 (big error) 
  - Error > 0.2 (huge error) 
  - Error > 0.3 (gigantic blunder, possibly an oversight or mis-click) 

Without further ado, here's a big list of my errors, a 'Wall of Shame' I like to call it. (Not really accurate though, nothing shameful about making errors.)

## Cube decisions
   
```{r cubes}
#| results: asis
for (j in mistake_types) {
  cat("\n### ", j)
  
  for (k in levels(cost_bins)) {
    cat("\n#### Error", k)
    
    temp <- df %>%
      filter(type == "Cube decision",
             mistake_type == j,
             cost_bin == k) %>%
      slice_sample(n = max_examples)
    
    if (nrow(temp) > 0) {
      for (i in 1:nrow(temp)) {
        cat("\n##### Position ", i)
        ggboard(temp$xgid[i]) %>% print()
        
        evaluation <- temp$cube_eq[i] %>% 
          read_lines() %>% 
          paste(rep("   ", length(.)), .) %>% 
          paste(collapse = "\n")
        
        cat("\n\n", evaluation, 
            "\n\n    ", temp$xgid[i], 
            "\n    File: ", temp$file[i], 
            "\n    Move: ", temp$move_no[i], 
            "\n\n", sep = "")
      }
    }
  }
}
```

## Checker plays

```{r checker}
#| results: asis
for (j in levels(move_bins)) {
  cat("\n### Move no. ", j)
  
  for (k in levels(cost_bins)) {
    cat("\n#### Error", k)
    
    temp <- df %>%
      filter(type == "Checker play",
             move_bin == j,
             cost_bin == k) %>%
      slice_sample(n = max_examples)
    
    if (nrow(temp) > 0) {
      for (i in 1:nrow(temp)) {
        cat("\n##### Position ", i)
        ggboard(temp$xgid[i]) %>% print()
        
        evaluation <- temp$move_eq[i] %>% 
          read_lines() %>% 
          str_remove_all("Cubeful ") %>% 
          paste(rep("   ", length(.)), .) %>% 
          paste(collapse = "\n")
        
        cat("\n\n", evaluation, 
            "\n\n    ", temp$xgid[i], 
            "\n    File: ", temp$file[i], 
            "\n    Move: ", temp$move_no[i], 
            "\n\n", sep = "")
      }
    }
  }
}
```