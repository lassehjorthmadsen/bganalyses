---
title: "Middle game cube benchmark"
author: "Lasse Hjorth Madsen"
date: today 
format: html
toc: true
toc-expand: true
toc-depth: 4
editor: source
execute:
  echo: false
  warning: false
  cache: false
---

```{r setup}
library(tidyverse)
devtools::load_all(path = "../../bglab")
max_move <- 12
error_threshold <- 0.07
```

```{r subset_and_clean}
df <- bgmoves %>% 
  distinct(xgid, .keep_all = TRUE) %>%
  filter(move_no <= max_move, 
         score1 == 0, score2 == 0, 
         proper_ca == "Double, take") %>% 
  # We don't want both the double and the subsequent take decision:
  mutate(duplet = file == lag(file) & move_no - 1 == lag(move_no)) %>% 
  filter(is.na(duplet) | !duplet) %>% 
  rowwise() %>% 
  # Extract the size of pass and no double errors
  mutate(pass_error = read_lines(cube_eq)[6],
         no_double_error = read_lines(cube_eq)[7]) %>% 
  ungroup() %>% 
  mutate(across(c(pass_error, no_double_error), 
                ~ str_extract(., "\\(.+\\)$") %>% 
                  str_remove_all("\\(|\\)") %>% 
                  as.numeric())) %>% 
  filter(pass_error > error_threshold, no_double_error < -error_threshold) %>% 
  select(file, move_no, player1, player2, cube_eq, xgid)  
```

## Why this?

This is a collection of positions that are solid double/takes, all from the early middle game (here defined as move number `r max_move` at the most, counting both sides). The intention is to help establish a feel for how good doubles and good takes look like for this common class of positions.

For all positions, I present the main one which is a clear double/take, meaning that both not doubling and passing would be at least a `r error_threshold`` error.

All positions are taken from a collection of my online matches at [Backgammon Galaxy](play.backgammongalaxy.com).

## Double/take positions

### Position 1
```{r}
ggboard("XGID=---BBBC-B---bB--b-bcBc-c--:0:0:-1:00:0:0:0:0:10")
```

### Position 2
```{r}
ggboard("XGID=-aa---EBB-AAbC---d-fa---A-:0:0:1:00:0:0:0:0:10")
```

### Position 3
```{r}
ggboard("XGID=-a-B--D-B---dD---dAdb--AA-:0:0:-1:00:0:0:0:0:10")
```

### Position 4
```{r}
ggboard("XGID=---BBBC-A---gC---a-cbb--AA:0:0:-1:00:0:0:0:0:10")
```

### Position 5
```{r}
ggboard("XGID=-a---CDBBa--dB---c-d-Ab-A-:0:0:1:00:0:0:0:0:10")
```

### Position 6
```{r}
ggboard("XGID=-a-BBBD-Aa--bB---c-cc--bB-:0:0:1:00:0:0:0:0:10")
```

### Position 7
```{r}
ggboard("XGID=aa----EBDA--bA---c-dbb-B--:0:0:-1:00:0:0:0:0:10")
```

### Position 8
```{r}
ggboard("XGID=---BaCC---C-cCab-c-c--b-A-:0:0:1:00:0:0:0:0:10")
```

### Position 9
```{r}
ggboard("XGID=-a--aBEBB---dBa--c-e----B-:0:0:1:00:0:0:0:0:10")
```

### Position 10
```{r}
ggboard("XGID=-a-BB-D-AA--eC---c-cB-c---:0:0:1:00:0:0:0:0:10")
```

### Position 11
```{r}
ggboard("XGID=aa--ABBBA--AcD---cbe--A-A-:0:0:1:00:0:0:0:0:10")
```

### Position 12
```{r}
ggboard("XGID=-ba-AAE-Ca--dD---b-eA-----:0:0:1:00:0:0:0:0:10")
```

### Position 13
```{r}
ggboard("XGID=-aa-aBDAB---dD---b-dBb----:0:0:1:00:0:0:0:0:10")
```

### Position 14
```{r}
ggboard("XGID=---b--EDC---a---bbceA--AA-:0:0:-1:00:0:0:0:0:10")
```

### Position 15
```{r}
ggboard("XGID=-a-aBBDBBA--c----b-cc-b-B-:0:0:1:00:0:0:0:0:10")
```

### Position 16
```{r}
ggboard("XGID=-a-aBAD-B--AdCa--b-ca-bAA-:0:0:1:00:0:0:0:0:10")
```

### Position 17
```{r}
ggboard("XGID=aA--A-CbC---dE-a-Abcb---A-:0:0:-1:00:0:0:0:0:10")
```

### Position 18
```{r}
ggboard("XGID=-baB--D-BAA-bC---abc-B-bb-:0:0:1:00:0:0:0:0:10")
```

### Position 19
```{r}
ggboard("XGID=--B-B-DBA---gB---c-dB---a-:0:0:1:00:0:0:0:0:10")
```

### Position 20
```{r}
ggboard("XGID=----A-EbC---dD---b-cbAA-b-:0:0:-1:00:0:0:0:0:10")
```

### Position 21
```{r}
ggboard("XGID=-B-B-bC-B--BbB--ac-cAAbb--:0:0:-1:00:0:0:0:0:10")
```


```{r show}
#| results: asis
#| include: false

# Print all positions that we found
for (i in 1:nrow(df)) {
  cat("\n## Position ", i)
  ggboard(df$xgid[i]) %>% print()
  
  evaluation <- df$cube_eq[i] %>% 
    read_lines() %>% 
    paste(rep("   ", length(.)), .) %>% 
    paste(collapse = "\n")
  
  cat("\n\n", evaluation, 
      "\n\n    ", df$xgid[i], 
      "\n\n", sep = "")
}
```

```{r save}
#| include: false

# Save the moneygame variant of all positions 
df$xgid %>% 
  str_split(":") %>% 
  map(~ replace(.x, 5, "00")) %>%  # Turn cube decision
  map(~ replace(.x, 9, "0")) %>%   # Turn into money game
  map_chr(~ paste(.x, collapse = ":")) %>% 
  write_lines(file = "data/good-cube-ids.txt")
```

