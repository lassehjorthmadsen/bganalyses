[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "analyses/explore-emg.html#why-this",
    "href": "analyses/explore-emg.html#why-this",
    "title": "Explore EMG Normalization",
    "section": "Why this?",
    "text": "Why this?\nThis note explores how eXtreme Gammon normalizes mwc, Match Winning Chances, to emg, Equivalent to Money Game, a metric that is (supposedly) comparable to money game equities. It is similar to what Jeremy Bagai did years ago in a detailed analysis here."
  },
  {
    "objectID": "analyses/explore-emg.html#introduction",
    "href": "analyses/explore-emg.html#introduction",
    "title": "Explore EMG Normalization",
    "section": "Introduction",
    "text": "Introduction\nIn backgammon money games mistakes are usually evaluated in terms of equities, \\(E\\), or expected value. \\(E=0\\) means that the game is even. Equities are typically normalized so the level of the cube and the stakes are not reflected in the size of mistakes: \\(E=0.1\\) means that the expected value of a position is one tenth of the cube value. If you made a \\(0.05\\) error, your position’s expected value just dropped by five percent of the cube value.\nIn match play, the natural unit of measurement is match winning chances, mwc. For example, trailing 3-away, 2-away, sometimes written as (-3,-2), yields \\(mwc=0.40\\), assuming strong, equal players. Unless otherwise noted, all mentioned equities are from the Kazaross XG2 match equity table, used as default by eXtreme Gammon (XG).\nThe \\(mwc\\) at stake varies by score. At double match point, a one point gain is worth \\(0.5\\ mwc\\), the difference between an even game, \\(mwc=0.50\\) and a sure victory, \\(mwc=1.00\\). At the beginning of a 17-point match one point is worth only about \\(0.04\\ mwc\\).\nIn a sense, double match point is like playing for $10 per point, compared to $0.8 per point at the beginning of the match.\nAlso, the value of one point is different for the leader and the trailer; at (-3,-2) one point is worth \\(0.10\\ mwc\\) for the trailer but \\(0.15\\ mwc\\) for the leader."
  },
  {
    "objectID": "analyses/explore-emg.html#emg-normalization",
    "href": "analyses/explore-emg.html#emg-normalization",
    "title": "Explore EMG Normalization",
    "section": "EMG normalization",
    "text": "EMG normalization\nAs mentioned, in money game we often like to compare errors without considering the level of the cube and the stakes. We rarely say things like “Taking that three-roll position cost me about $4.5 because the cube was at 4 and we played for $10 per point.” It is more common to say that the take is a 0.15 error.\nThis way, we can compare conceptual errors by abstracting away the specifics. If you would like the actual cost of taking, you would multiply the 0.15 error by the cube value and the stakes.\nLikewise, it can be useful to normalize match play errors, so that we can compare them to money game, and so we can compare errors across scores. If some error loses \\(0.03\\ mwc\\) at (-4, -5), but only \\(0.01\\ mwc\\) at (-17, -10) is that because the first score is closer to the end of the match, where points are more valuable, or is it because the first error is a bigger one, conceptually? And how big would the same mistake have been in a money game?\nThis is where emg (Equivalent to Money Game) comes in. The idea is to scale the difference between losing a single point and winning a single point in a match to the interval \\([-1;+1]\\), that we use in money game.\nFor example, at (-3,-7) the leader has \\(mwc\\) of about \\(0.76\\). If he loses one point and gets to (-3,-6) that drops to \\(0.71\\). If he wins one point for (-2,-7) that rises to \\(0.84\\). The range is \\([0.71;0.84]\\), and the difference between winning and losing a single point is \\(0.84-0.71 = 0.13\\). We can scale any \\(mwc\\) value to the corresponding money interval \\([-1;+1]\\) like this:\n\\[emg =\\frac{mwc-0.71}{0.13}\\times{2}-1\\]\nSo the \\(emg\\) for our minimal value of \\(mwc=0.71\\) becomes:\n\\[emg =\\frac{0.71-0.71}{0.13}\\times{2}-1=-1\\]\nAnd for our maximum value of \\(mwc=0.84\\) we get:\n\\[emg =\\frac{0.84-0.71}{0.13}\\times{2}-1=+1\\] Of course, with the doubling cube and gammons, you can be even worse off and end up outside the interval, like if you’re sure to lose a gammon and \\(E=-2.00\\).\nMore generally, if \\(mwc_{min}\\) is the match winning chance a player has after losing the cube value, and \\(mwc_{max}\\) is the corresponding chance after winning the cube value, then we can calculate \\(emg\\) from any \\(mwc\\) at any score like this:\n\\[emg =\\frac{mwc-mwc_{min}}{mwc_{max}-mwc_{min}}\\times{2}-1\\]\nSo if we lead (-3,-7) and mess up the opening roll so our \\(mwc\\) drops from \\(0.76\\) to \\(0.75\\), then the size of the error in \\(emg\\) would be:\n\\[emg =\\frac{0.75-0.71}{0.13}\\times{2}-1=-0.38\\]\nThis also means that the leader’s \\(emg\\) at the beginning of the game is negative:\n\\[emg =\\frac{0.76-0.71}{0.13}\\times{2}-1=-0.23\\]\nThat seems a little funny. The reason is, that in some sense the leader is closer to losing the game that to winning, since the gain by winning is much bigger than the loss from losing. The leader is not in the middle, but closer to the lower end of the interval \\([-1;1]\\).\nThis is just one counter-intuitive thing about emg normalization; there are more:"
  },
  {
    "objectID": "analyses/explore-emg.html#the-problem",
    "href": "analyses/explore-emg.html#the-problem",
    "title": "Explore EMG Normalization",
    "section": "The problem",
    "text": "The problem\nSometimes, the \\(emg\\) appears really broken. Take a pure three-roll position where the non-roller has winning probability, \\(P(w)\\) of:\n\\[\nP(w) = \\frac{5}{6}\\times\\frac{1}{6}\\times\\frac{5}{6}\\ + \\ \\frac{5}{6}\\times\\frac{5}{6}\\times\\frac{5}{6}\\times\\frac{1}{6} = 0.212\n\\] Consider two cases of such a position:\n\nYou’re being doubled trailing (-3,-2)\nYou’re being redoubled when tied (-3,-3)\n\nIn both cases you can take for the match (possibly via an automatic redouble), and get \\(mwc = 0.212\\). Or you can pass and get to (-3,-1) which is \\(mwc=0.249\\) The two cases appear identical. You’re better of passing. Taking would cost \\(0.249-0.212 = 0.037\\ mwc\\) in both situations.\nBut plucking the two cases into our \\(emg\\) formula we get:\n\n\\(emg =\\frac{0.21219-0.24924}{0.5-0.24924}\\times{2}-1=-1.296\\)\n\\(emg =\\frac{0.21219-0.24924}{0.75076-0.24924}\\times{2}-1=-1.148\\)\n\nSo at (-3,-2) the mistake of taking comes to a \\(-0.296\\  emg\\) error; at (-3,-3) what appears to be an identical mistake comes to a \\(-0.148\\  emg\\) error.\nYou can set up a pure three-roll position in XG and confirm that these are indeed the reported emg errors when accepting a (re-)double at those two scores.\nWhat’s going on?\nInspecting the emg formula, it isn’t that hard to figure out: The \\(0.037\\ mwc\\) error just looks smaller when you put it in the wide interval between losing and winning you get at (-3,-3) with cube at 2, compared to the more narrow interval at (-3,-2), cube at 1. As noted, the mwc interval in the two cases are \\([0.25;0.50]\\) and \\([0.25;0.75]\\) respectively.\nIt is counter intuitive, however, and you wonder if emg fails after all to be useful for comparing errors across scores, and between match play and money games.\nOn the other hand: Perhaps this is exactly what we want emg to do: A \\(0.037\\ mwc\\) error is easier to make at the end of the match, and therefore perhaps shouldn’t count as heavily. Just like a $1 mistake is small when playing for $100 per point, but big when playing for $2 per point.\nWe can note, like Bagai did in his paper, that a similar observation can be made when you are being doubled to 8 (in the same three-roll position) at (-3,-5). You can again choose between trailing (-3,-1) with \\(0.249\\ mwc\\) or playing for the match with \\(0.212\\ mwc\\), which would be a \\(0.037\\ mwc\\) error. This time the interval is even wider, so the emg normalized error by taking comes to \\(-0.099\\). This can be checked with XG.\nWe can also do a plot similar to the one Bagai showed, to visualize why the normalizations must necessarily result in different emg-values.\n\n\n\n\n\nThe plot shows three lines, one for each of the three cases. They all pass through the point where \\(mwc = 0.25\\) and \\(emg = -1.0\\) since losing the cube value in all cases results in (-3,-1) with \\(mwc = 0.25\\). Winning the cube value would result in mwc-values of \\(0.5; 0.75; 1.00\\) respectively.\nThe emg-values obtained by erroneously taking the cube (left-most data points) are all below \\(-1.0\\ emg\\) since in all three cases we have a pass. But they cannot be equal, like we might intuitively expect, since the transformation is linear, and the three lines have different slopes."
  },
  {
    "objectID": "analyses/explore-emg.html#more-scores",
    "href": "analyses/explore-emg.html#more-scores",
    "title": "Explore EMG Normalization",
    "section": "More scores",
    "text": "More scores\nLet’s look at the size of the error by taking the same three-roll position for more scores, to get a feel for how the emg normalization in general compares to raw mwc.\nThe money benchmark is the error of accepting a three-roll position, which is easy to calculate, since for money there can’t be any proper recubes. The three-roll position has an expected money game value of \\(E = 2P(w) - 1 = -0.576\\) for the non-roller. So after accepting an initial double, the non-roller faces an average loss of \\(2\\times -0.576=-1.151\\) and the position is a money pass, since the loss of one point is just \\(-1\\). The size of the take error is \\(-0.151\\) (times the cube, times the stake, if you want the loss in real money).\nThe chart below shows the size of the error of accepting an initial double in a pure three-roll position, at all pre-crawford scores in a 9-point match. Errors are nomalized to emg, as explained above.\n(Note that on the x-axis, negative values are the real errors; a positive value is the margin by which the take is correct.)\n\n\n\n\n\nAs the chart shows, at six scores the three-roll position is actually a take. The biggest take is, not surprisingly, at (-4,-2) where the non-roller has an automatic redouble that activates exactly the four points needed to win. Also, in some cases, when the non-roller needs two or three points, the high value of those points is enough to turn the position into a take.\nThe biggest passes are at (-4,-3) and (-2,-2), ignoring that in the later case one player would usually already have doubled by now. In general, the biggest passes are when the roller needs two, three or four points to win. In these cases, a two-point win is particularly valuable.\nIn about half of all scores the error from taking is bigger than for money, in the other half smaller, when we use the emg normalization to compare.\nBut we really wanted to figure out if the emg normalization was a good or a bad idea to begin with. So let’s show a similar plot with emg and mwc errors side-by-side:\n\n\n\n\n\nThe two plots show similar over-all patterns, but also some differences. Of course, both metrics agree on what scores produce takes; when one is negative the other is also, by definition.\nThe mwc-metric has the biggest error at (-2,-2); emg says this honor goes to (-4,-3). In a way, what emg says is this: ‘Yeah alright, taking at (-2,-2) is a big mistake. But part of the reason is, that there is so much mwc at stake at that score already. Any mistake is bound to be big. So we should adjust for that.’\nBut should we? It is hard to say. You could argue that conceptually the take is a bigger mistake at (-2,-2) because the score is special. Same thing could be said of (-2,-3) and (-3,-2) where emg also gives a different ranking.\nLet’s do a few more plots to see if we can nail this better.\nThis one shows the same data, but plotted differently, with mwc at the x-axis, and emg at the y-axis.\n\n\n\n\n\nSince the plot shows the same data some of the same things also stand out: (-2,-2) is a bit of an outlier; at (-4,-2) the non-roller has a big take. In general, there’s a reasonable correlation between mwc and emg. It’s worth pointing out that we don’t want a perfect correlation: If all points where placed exactly at the light green trend line, then mwc and emg would be equivalent, same thing on different scales, like Fahrenheit and Celsius. The idea is that emg should be different from mwc, more meaningful, more interpretable.\nLet’s do the same plot but with more scores: All combinations from a full 25-point match. (We leave out the (-2,-2) oddball, to give more plotting space to the more ‘normal’ cases.)\n\n\n\n\n\nNow, the correlation breaks down. In particular, for the very lopsided scores like (-25,-2) and (-18,2), the mwc at stake becomes tiny, so the margin by which the take is correct, is also small. At all the lopsided scores the non-roller appears to have a small take as measured by mwc.\nThe emg error, on the other hand, is a bit different at (-25,-2) compared to (-18,-2) for example. Just as emg tries to adjust for scores with a lot of mwc at stakes, it also adjust for very little mwc at stake, thus magnifying small mwc’s.\nAgain, it is debatable if this is really desired behavior or not."
  },
  {
    "objectID": "analyses/explore-emg.html#checker-play-errors",
    "href": "analyses/explore-emg.html#checker-play-errors",
    "title": "Explore EMG Normalization",
    "section": "Checker play errors",
    "text": "Checker play errors\nOne final experiment before we wrap this up. As we have seen, part of the reason that the emg transformation can give surprising results, is that take errors are extrapolated outside the \\([mwc_{min};mwc_{max}]\\) interval that we use for normalization. A take error results in mwc smaller than a ordinary loss of the cube value, \\(mwc_{min}\\).\nChecker play errors, on the other hand, are differences between mwc’s, and the are usually not that big (except in extreme cases).\nLet’s consider a toy example: A last-roll bearoff where one player has two checkers left, one on the six point, one on the three point, with a two to play. The opponent owns the cube and has four checkers on her one point. The player has two options for his two:\n\n6/4, for \\(p(w) = \\frac{5}{6} \\times \\frac{17}{36} = 0.394\\), and \\(E = 2P(w) - 1 = -0.212\\)\n3/1, for \\(p(w) = \\frac{5}{6} \\times \\frac{15}{36} = 0.347\\), and \\(E = 2P(w) - 1 = -0.306\\)\n\nFor money, 3/1 would be a \\(-0.306 + 0.212 = -0.094\\) error.\nAt double match point, 3/1 would be a \\(0.347 - 0.394 = -0.047\\ mwc\\) error.\nSince 6/4 of course would be correct at all scores, and it is fair to say that 3/1 is the same conceptual error at all scores, we would like the emg transformation to produce the same value, no matter the score. One way to think of this: Suppose you’re browsing your matches for bear-off checker play errors, in order to fine tune your skill in that department. Then you would like to flag errors both early and late in the match. But the mwc-error from playing 3/1 at (-1,-1) is 16 times bigger than at (-25,-25).\nIt’s reasonable to think that playing 3/1 shouldn’t be disregarded as an error, just because it happened at (-25,-25) rather that at (-1,-1).\nTo achieve this, we really need some kind of normalization; looking at mwc will tend to miss errors early in a long match.\nDoes emg work for this purpose? I think it should, based on the plots and formulas above, but just in case I’m missing something, let’s try to calculate the size of the error of playing 3/1 at all scores, in emg and in mwc:\n\n\n\n\n\n\n\n\nAs expected, emg normalizes the error of playing 3/1 to \\(-0.0926\\) for all scores. (This value is a little off from the earlier mentioned \\(-0.094\\) because of rounding error in that manual calculation.) We see how the mwc error is high near the end of the match, lower at the beginning. (-25,-25) is not the very rightmost data point, because for these scores the mwc-errors are tiny, and the exact value depends on rounding and precision of the match equity table."
  },
  {
    "objectID": "analyses/janowski.html#why-this",
    "href": "analyses/janowski.html#why-this",
    "title": "Janowski Formulars",
    "section": "Why this?",
    "text": "Why this?\nThis note is for better understanding exactly what eXtreme Gammon does to estimate cubeless and cubeful equities at money and match play. In particular, we apply the Janowski Formular(s) and try to figure out what it means when the eXtreme Gammon Documentation says that “In eXtreme Gammon the Janowski formula has been extended to apply also in match play”."
  },
  {
    "objectID": "analyses/janowski.html#how-xg-works",
    "href": "analyses/janowski.html#how-xg-works",
    "title": "Janowski Formulars",
    "section": "How XG works",
    "text": "How XG works\nThey basic mechanism is this:\n\nA neural net evaluates a position and come up with six probabilities for either winning or losing a regular game, a gammon and a backgammon. The estimated probabilities are for cubeless money game: What will happen if the game is played to conclusion with no doubling cube at money game conditions.\nTo improve the quality of this estimate, a weighted average of all possible positions after one and after two rolls is calculated; what we call 2- and 3-ply evaluations. The initial neural net evaluation, 1-ply, is not available in XG.\nFrom the estimated probability distribution, it is easy to calculate an expected, or average outcome, the equity of the position. This is still assuming money game with no doubling cube. Since that situation never happens, the number is not terribly relevant. Therefore, XG tries to estimate what the cubeful equity is, using formulas develped by Rick Janowski."
  },
  {
    "objectID": "analyses/janowski.html#janowski-formulas",
    "href": "analyses/janowski.html#janowski-formulas",
    "title": "Janowski Formulars",
    "section": "Janowski formulas",
    "text": "Janowski formulas\nWe won’t explain in detail how Rick Janowski’s formulars work (that is in the article linked above), we’ll just show an example.\nAs mentioned , a game of backgammon played to conclusion can end in six possible ways. A certain position in Janowski’s article, have the following probabilities of each outcome:\n\n\n\n\n \n  \n      \n    Regular \n    Gammon \n    Backgammon \n    Sum \n  \n \n\n  \n    Player wins \n    0.47 \n    0.17 \n    0.01 \n    0.65 \n  \n  \n    Opponent wins \n    0.31 \n    0.04 \n    0.00 \n    0.35 \n  \n  \n    Sum \n    0.78 \n    0.21 \n    0.01 \n    1.00 \n  \n\n\n\n\n\nSuppose the relative gammon and backgammon frequencies stay constant as the chance to win changes. Then, the average win will be:\n\\[W=\\frac{47 \\times 1  + 17 \\times 2 + 1 \\times 3}{47 + 17 + 1} = 1.292\\ points\\] The average loss will be:\n\\[L=\\frac{31 \\times 1  + 4 \\times 2 + 0 \\times 3}{31 + 4 + 0} = 1.114\\ points\\]\nThe take point, taking recubes into account is:\n\\[TP= \\frac{L-0.5}{W+L+0.5x}\\]\nwhere \\(x\\) is what Janowski calls the cube-life index, a number between 0 (where the cube is dead) and 1, where all doubles are efficient, i.e. right at the borderline between take and pass.\nThe equity, as a function of game winning chances, \\(p\\) and cube location (player, center, opponent) is:\n\\[E_{player}= p(W+L+0.5x)-L\\] \\[E_{center}= p(W+L+0.5x)-L-0.5x\\] \\[E_{opponent}= \\frac{4}{4-x}(p(W+L+0.5x)-L-0.25x)\\]\nFrom these, we can estimate cube actions and the size of any cube errors.\nA couple of observations:\n\nIt shouldn’t be too difficult to extend this to match play, since \\(W\\) and \\(L\\) can be calculated with match equities, rather than 1, 2, 3 for regular, gammon and backgammon.\nIt is a simplification to assume that gammon frequencies remain and cube-life remain constant through a game; near conclusion games are more likely to be races without gammons and fewer opportunities to double efficiently.\n\nLet’s do this with a few practical examples and check if the formulas agree with what XG says."
  },
  {
    "objectID": "analyses/janowski.html#money-game-examples",
    "href": "analyses/janowski.html#money-game-examples",
    "title": "Janowski Formulars",
    "section": "Money game examples",
    "text": "Money game examples\nLet’s look at a position after Black opens with 21, slotting:\n\n\n\n\n\nAccording to XG 2-ply (an average of the value of the position after Black’s 21 possible replies), the probabilities of the six possible outcomes of the game, if played to conclusion, are as follows:\n\n\n\n\n \n  \n      \n    Regular \n    Gammon \n    Backgammon \n    Sum \n  \n \n\n  \n    Player wins \n    0.3574 \n    0.1319 \n    0.0091 \n    0.4984 \n  \n  \n    Opponent wins \n    0.3656 \n    0.1300 \n    0.0060 \n    0.5016 \n  \n  \n    Sum \n    0.7230 \n    0.2619 \n    0.0151 \n    1.0000 \n  \n\n\n\n\n\nThis comes to a cubeless equity of: \\(E = 0.0049\\); White is a slight underdog to win, but is compensated by a tiny bit of extra gammons and backgammons, so that the game is basically even.\nNote that the numbers that XG reports are probabilities for winning (including gammons and backgammons), gammon (including backgammon), and backgammon. So they have to be converted to get probabilities that sum to 1. (My R-package, backgammon has a function for that.)\nIf we apply Janowski’s formulars to the above cubeless probablities, we get:\n\n\n\n\nAssuming a dead cube, \\(x=0\\), White’s take point is: 0.303\nAssuming a perfectly live cube, \\(x=1\\), White’s take point is: 0.2539\nAssuming a dead cube, \\(x=0\\), Blacks’s take point is: 0.31\nAssuming a perfectly live cube, \\(x=1\\), Black’s take point is: 0.2598\n\nAll these numbers align perfectly with what you get when you consult XGs Analyze|Cube Information menu.\nRegarding the cubeful equities for the actual position, we have:\n\n\n\n\nWhite’s equity owning the cube: 0.181\nWhite’s equity with a centered cube: 0.005\nWhite’s equity after double/take: -0.344\n\nWhich also agrees with what XG says, if we assume a cube-life index of \\(0.706\\). Does XG change the cube-life index depending on the position?\nLets do another example to try to find out.\n\n\n\n\n\n\n\n\n\n \n  \n      \n    Regular \n    Gammon \n    Backgammon \n    Sum \n  \n \n\n  \n    Player wins \n    0.4969 \n    0 \n    0 \n    0.4969 \n  \n  \n    Opponent wins \n    0.5031 \n    0 \n    0 \n    0.5031 \n  \n  \n    Sum \n    1.0000 \n    0 \n    0 \n    1.0000 \n  \n\n\n\n\n\nWith no gammons, the cubeless take point clearly is \\(0.25\\) and the perfectly efficient cubeful take point is \\(0.20\\) which is also what XG reports.\nThe calculated equities, Janowski-style, assuming a cube-life index of \\(0.706\\), are:\n\nWhite’s equity owning the cube: 0.173\nWhite’s equity with a centered cube: -0.005\nWhite’s equity after double/take: -0.361\n\nXG reports \\(0.145, -0.013, -0.325\\) respective, so it must assume a lower cube value which would also be reasonable in a medium to short length race like this.\nTrouble is, in order to match these values, we would need cube-life indices of \\(0.595\\) when White owns the cube, \\(0.635\\) when Black owns the cube, while no cube-life value would produce \\(E = -0.013\\); the value XG reports for a centered cube."
  },
  {
    "objectID": "analyses/met-precision.html#why-this",
    "href": "analyses/met-precision.html#why-this",
    "title": "Match Equity Precision",
    "section": "Why this?",
    "text": "Why this?\nMatch equity calculations in backgammon can be tricky and hard to perform over the table. How accurate can we hope to be when calculating take points that involve more than one entry in a match equity table?\nLet’s do a couple of simple experiments and try to find out."
  },
  {
    "objectID": "analyses/met-precision.html#the-rounding-problem",
    "href": "analyses/met-precision.html#the-rounding-problem",
    "title": "Match Equity Precision",
    "section": "The rounding problem",
    "text": "The rounding problem\nHere’s one example that is fairly straight forward. You’re in the beginning of a 17-point match, off for a bad start, trailing 0-5 or 17-away, 12-away, or (-17,-12). You’re facing a double in a bearoff that you consider a borderline take/pass for money.\nPerhaps something like this:\n\n\n\n\n\nShould trailing as white make you more or less inclined to accept a double from black?\nFor simplicity let’s do the calculations assuming no redoubles, since this example is a bearoff with no recube potential anyway. Using the Kazaross XG2 match equity table, with full six digit precision, the calculation goes like this.\n\n\n\n\nA pass means (-17,-11), \\(mwc=0.2647\\)\nTaking and winning means (-15, -12), \\(mwc=0.374741\\), for a gain of: \\(0.374741-0.2647 = 0.110041\\)\nTaking and losing means (-17,-10), \\(mwc=0.22625\\), for a loss of: \\(0.2647 - 0.22625 = 0.03845\\)\n\\(Take\\ point = \\frac{loss}{loss+gain} = \\frac{0.03845}{0.03845 + 0.110041} = 0.2589383\\)\n\nYour take point is a bit higher than for money, you should be less inclined to take; so you probably have a pass if this is borderline for money.\nBut of course, nobody can do calculations like this with six digits over the board. If you’re a really good tournament player, you might attempt doing the same calculations rounded to two digits (whole percentages).\nLet’s see how that would play out:\n\n\n\n\nA pass means (-17,-11), \\(mwc=0.26\\)\nTaking and winning means (-15, -12), \\(mwc=0.37\\), for a gain of: \\(0.37-0.26 = 0.11\\)\nTaking and losing means (-17,-10), \\(mwc=0.23\\), for a loss of: \\(0.26 - 0.23 = 0.03\\)\n\\(Take\\ point = \\frac{loss}{loss+gain} = \\frac{0.03}{0.03 + 0.11} = 0.2142857\\)\n\nNow, you reach the opposite conclusion: Your take point is considerably lower than the well-known \\(0.25\\) cubeless take point for money. You might well have a clear take.\nLooking at the calculations, we see that the calculations are impacted heavily from a couple of rounding errors: The equity from passing and getting to (-17-11) gets rounded down; the equity from taking and winning gets rounded up so the total \\(mwc\\) loss from taking (and being wrong) is only about \\(0.03\\), almost a full percentage point lower that the \\(0.038\\) we get using all digits.\nFinally, that lower number goes into both the numerator and the denominator, of the take point calculation, impacting the take point in a big way."
  },
  {
    "objectID": "analyses/met-precision.html#how-common-is-this",
    "href": "analyses/met-precision.html#how-common-is-this",
    "title": "Match Equity Precision",
    "section": "How common is this?",
    "text": "How common is this?\nDid I cherry pick this example? Well, yes, but the cherry wasn’t hard to find. Let’s look at more examples.\n\nSimple take points\nFor starters, here’s a plot showing more cubeless, gammonless take points, when the player being doubled is 17-away.\n\n\n\n\n\nSome observations:\n\nNot surprisingly, you have a low take point, around \\(0.19\\), when the opponent needs just two points to win, and you have an automatic redouble available.\nSame thing when the opponent needs three points and you’re kind of desperate.\nYou have a much higher take point when the opponent needs four, because the extra two point at stake are very valuable for the opponent.\nThe same holds, but to a smaller and smaller degree, when the opponent needs 6, 8 or 10 points to win.\n\nLet’s extend the plot to cover more scores:\n\n\n\n\n\nSome observations:\n\nIn general, for this kind of doubles (initial, cubeless, gammonless) it is easier, not harder, to accept a double if you are leading.\nThe exception is if the opponent needs only two or three points while having a big lead. Here, you’re near dead if you lose anyway, so take points are low.\nThe very highest take point we find at (-4,-3): \\(0.352\\) At this score you’re often better off passing and getting to the notorious (-4,-2) where you can double very aggresively and try to win the match with a gammon.\n\n\n\nWith rounding errors\nBut the goal was to examine the impact of rounding errors. Let’s go back to the 17-away take points from the first diagram, and experiment with the number of digits we use for calculating take points.\n\n\n\n\n\nWe see that the 2-digit calculations are often off by a fair amount. The (-17,-12) example I mentioned earlier, is not the only one.\nLet’s extend this again with many small plots for different scores:\n\n\n\n\n\nFrom the chart it is pretty evident that two-digit precision just doesn’t cut it for calculating these kind of take points: They are all over the place, basically.\n\n\n\nAcross all scores, the average absolute difference between take points with two-digit precision and six-digit precision is: 0.041\nThe distribution of differences looks like this:\n\n\n\n\n\nWe see that is is very common for the two-digit take point to be off by a couple of percentage points; sometimes as much as five percentage points.\n(In some extreme cases the difference between two-digit and six-digit take points can be as high as \\(0.78\\); this is because of scores like (-2,-23) where the leader’s rounded \\(mwc\\) is \\(1.00\\) even after passing; there’s no measurable gain from taking and winning, so the take point becomes \\(1.00\\)).\n\n\nWith gammons\nBefore we wrap up, let’s have a look at how take points with and without rounding error look when we also have gammons and backgammons. We use gammon and backgammon frequencies, that is, the proportion of games won or lost, that result in a gammon or backgammon. For illustration, we use frequencies similar to what can be expected at the beginning of a money game:\n\nPlayer’s gammon frequency: \\(0.26\\)\nPlayer’s backgammon frequency: \\(0.012\\)\nOpponent’s gammon frequency: \\(0.26\\)\nOpponent’s gammon frequency: \\(0.012\\)\n\nA plot similar to the one earlier, this time comparing take points with and without gammons, 2- and 6-digit precision, when 17-away, vs. opponent score:\n\n\n\n\n\nFor gammonish positions the take points tend to increase with size of lead, but using only two digits basically create so much noise to that the calculations are meaningless.\nFunny enough, it seems that the noise is actually sightly smaller when working with positions where gammons and backgammons are possible. This is probably because the most destructive rounding errors then to be cancel out when we have more numbers involved.\nThe density plot of take point rounding errors confirm this:"
  },
  {
    "objectID": "analyses/met-precision.html#conclusions",
    "href": "analyses/met-precision.html#conclusions",
    "title": "Match Equity Precision",
    "section": "Conclusions",
    "text": "Conclusions\n\nIt seems that doing take point calculations that involve several entries in the match equity table really requires at least three digit precision.\nSince this is not feasible to do over the board, the best practial approach is probably to study benchmark positions and to use heuristics along those lines:\n\nWhen one player need 2, 3, or 4 points to win, be aware that those remaining points are particular valuable.\nAutomatic redoubles creating overage for one player and has a big impact on take decisions.\n\nWhen leading, be slightly more willing to take doubles in races where no gammons are possible.\nWhen leading, be slightly less willing to take doubles in games where gammons are a real possibility."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Backgammon Playground",
    "section": "",
    "text": "This is my backgammon playground, where I keep some analyses related to backgammon. They help me wrap my head around stuff related to match theory, how eXtreme Gammon works under the hood, and how match scores differ.\nThe notes are mostly for my personal use, but I’m always open for discussions on how to approach these things. Do check out the side menu if you’re curious, and feel free to reach out, if you have comments or questions.\nMy favorite tool is R, and so I have an R-package in a repository on Github that I use for some of this. (This site, by the way, is also on Github.)\nThanks,\nLasse"
  }
]